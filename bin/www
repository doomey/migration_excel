#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('migration:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */


var httpPort = normalizePort(process.env.HTTP_PORT || '80');
app.set('httpPort', httpPort);

var httpsPort = normalizePort(process.env.HTTPS_PORT || '443');
app.set('httpsPort', httpsPort);

/**
 * Create HTTP & HTTPS server.
 */
// 실행스크립트에서는 동기 방식을 써도 된다.
//site.key와 site.crt는 Openssl에서 직접 만들 수도 있고(self signed certificate), 아니면 구매할 수도 있다.
//구매하려면 도메인이 필요하다.

//path.join(__dirname, 'site.key') 으로 안 쓰면 day11 디렉터리에서 site.key를 찾기 때문에 오류난다.
var key = fs.readFileSync(path.join(__dirname, 'site.key')).toString(); //서버의 개인키. 서버 자신이 가지고 있다.
var cert = fs.readFileSync(path.join(__dirname, 'site.crt')).toString(); //서버의 인증서. 인증서 안에 서버의 공개키, CA 인증 정보가 들어있다.
var options = {
  "key" : key,
  "cert" : cert
};

debug("key : " + key);
debug("cert : " + cert);

var server = http.createServer(app);
var secureServer = https.createServer(options, app);

/**
 * Listen on provided httpPort & httpsPort, on all network interfaces.
 */

server.listen(httpPort);
server.on('error', onError);
server.on('listening', onListening);

secureServer.listen(httpsPort);
secureServer.on('error', onError);
secureServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // httpPort & httpsPort number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP & HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind;
  if (this === server){
    bind = typeof httpPort === 'string'
        ? 'Pipe ' + httpPort
        : 'Port ' + httpPort;
  } else {
    bind = typeof httpsPort === 'string'
        ? 'Pipe ' + httpsPort
        : 'Port ' + httpsPort;
  }



  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = this.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : ((this === server) ? 'httpPort ' : 'httpsPort ') + addr.port;
  debug('Listening on ' + bind);
}